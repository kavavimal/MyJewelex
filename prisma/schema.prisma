generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  password     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  image        String?
  account_type AcountType @default(CUSTOMER)
  role_id      Int
  phone_number String?
  otp          String?
  firstName    String
  lastName     String
  products     Product[]
  role         Role       @relation(fields: [role_id], references: [role_id])
  accounts     Account[]
}

model Role {
  role_id     Int              @id @default(autoincrement())
  role_name   String           @unique
  description String?
  permissions RolePermission[]
  users       User[]
}

model Permission {
  permission_id   Int              @id @default(autoincrement())
  permission_name String           @unique
  description     String?
  created_at      DateTime         @default(now())
  roles           RolePermission[]
}

model RolePermission {
  role_id       Int
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [permission_id])
  role          Role       @relation(fields: [role_id], references: [role_id])

  @@id([role_id, permission_id])
}

model Product {
  product_id   Int                @id @default(autoincrement())
  product_name String
  sku          String             @unique
  description  String?
  images       String[]
  status       ProductStatus      @default(DRAFT)
  user_id      String
  tags         ProductTag[]
  attributes   ProductAttribute[]
  category     ProductCategory[]
  // attributes		Attribute[]
  user         User               @relation(fields: [user_id], references: [id])
}

model Category {
  category_id    Int               @id @default(autoincrement())
  parent_id      Int?
  name           String            @unique
  description    String?
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  category_image String?
  products       ProductCategory[]
}

model ProductCategory {
  category_id Int
  product_id  Int
  category    Category @relation(fields: [category_id], references: [category_id])
  product     Product  @relation(fields: [product_id], references: [product_id])

  @@id([category_id, product_id])
}

model Country {
  country_id Int      @id @default(autoincrement())
  name       String   @unique
  region     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  // products    ProductCountry[]
}

model Tag {
  tag_id      Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  products    ProductTag[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model ProductTag {
  product_id Int
  tag_id     Int
  product    Product @relation(fields: [product_id], references: [product_id])
  tag        Tag     @relation(fields: [tag_id], references: [tag_id])

  @@id([tag_id, product_id])
}

model Attribute {
  attribute_id Int                @id @default(autoincrement())
  name         String             @unique
  isRequired   Boolean            @default(false)
  isMultiple   Boolean            @default(false)
  description  String?
  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt
  values       AttributeValue[]
  products     ProductAttribute[]
}

model ProductAttribute {
  product_id   Int
  attribute_id Int
  product      Product   @relation(fields: [product_id], references: [product_id])
  attribute    Attribute @relation(fields: [attribute_id], references: [attribute_id])

  @@id([attribute_id, product_id])
}

model AttributeValue {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  attribute    Attribute @relation(fields: [attribute_id], references: [attribute_id])
  attribute_id Int
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

// model ProductCountry {
//   country_id Int
//   product_id Int
//   country    Country @relation(fields: [country_id], references: [country_id])
//   product    Product @relation(fields: [product_id], references: [product_id])

//   @@id([country_id, product_id])
// }

model OtpVerification {
  id           Int      @id @default(autoincrement())
  email        String?  @unique
  phone_number String?  @unique
  otp          String
  mode         String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  expiry       BigInt

  @@unique([email, phone_number])
}

enum AcountType {
  CUSTOMER
  ADMIN
  VENDOR
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}
